searchData={"items":[{"type":"module","title":"json","doc":null,"ref":"json.html"},{"type":"function","title":"json.decode/1","doc":"Parses a JSON value from Binary . Supports basic data mapping: | JSON | Erlang | |----------|------------------------| | Number | integer() \\| float() | | Boolean | true \\| false | | Null | null | | String | binary() | | Object | #{binary() =&gt; _} | Errors - error(unexpected_end) if Binary contains incomplete JSON value - error({invalid_byte, Byte}) if Binary contains unexpected byte or invalid UTF-8 byte - error({invalid_sequence, Bytes}) if Binary contains invalid UTF-8 escape Example 1 &gt; json : decode ( &lt;&lt; &quot;{\\&quot;foo\\&quot;: 1}&quot; &gt;&gt; ) . #{ &lt;&lt; &quot;foo&quot; &gt;&gt; =&gt; 1 }","ref":"json.html#decode/1"},{"type":"function","title":"json.decode/3","doc":"Parses a JSON value from Binary . Similar to decode/1 except the decoding process can be customized with the callbacks specified in Decoders . The callbacks will use the Acc value as the initial accumulator. Any leftover, unparsed data in Binary will be returned. Default callbacks All callbacks are optional. If not provided, they will fall back to implementations used by the decode/1 function: - for array_start : fun(_) -&gt; [] end - for array_push : fun(Elem, Acc) -&gt; [Elem | Acc] end - for array_finish : fun(Acc, OldAcc) -&gt; {lists:reverse(Acc), OldAcc} end - for object_start : fun(_) -&gt; [] end - for object_push : fun(Key, Value, Acc) -&gt; [{Key, Value} | Acc] end - for object_finish : fun(Acc, OldAcc) -&gt; {maps:from_list(Acc), OldAcc} end - for float : fun erlang:binary_to_float/1 - for integer : fun erlang:binary_to_integer/1 - for string : fun (Value) -&gt; Value end - for null : the atom null Errors - error({invalid_byte, Byte}) if Binary contains unexpected byte or invalid UTF-8 byte - error({invalid_sequence, Bytes}) if Binary contains invalid UTF-8 escape - error(unexpected_end) if Binary contains incomplete JSON value Example Decoding object keys as atoms: 1 &gt; Push = fun ( Key , Value , Acc ) -&gt; [ { binary_to_existing_atom ( Key ) , Value } | Acc ] end . 2 &gt; json : decode ( &lt;&lt; &quot;{\\&quot;foo\\&quot;: 1}&quot; &gt;&gt; , ok , #{ object_push =&gt; Push } ) . { #{ foo =&gt; 1 } , ok , &lt;&lt; &gt;&gt; }","ref":"json.html#decode/3"},{"type":"function","title":"json.decode_continue/2","doc":"Continue parsing a stream of bytes of a JSON value. Similar to decode_start/3 , if the function returns {continue, State} and there is no more data, use end_of_input instead of a binary. 1 &gt; { continue , State } = json : decode_start ( &lt;&lt; &quot;{\\&quot;foo\\&quot;:&quot; &gt;&gt; , ok , #{ } ) . 2 &gt; json : decode_continue ( &lt;&lt; &quot;1}&quot; &gt;&gt; , State ) . { #{ foo =&gt; 1 } , ok , &lt;&lt; &gt;&gt; } 1 &gt; { continue , State } = json : decode_start ( &lt;&lt; &quot;123&quot; &gt;&gt; , ok , #{ } ) . 2 &gt; json : decode_continue ( end_of_input , State ) . { 123 , ok , &lt;&lt; &gt;&gt; }","ref":"json.html#decode_continue/2"},{"type":"function","title":"json.decode_start/3","doc":"Begin parsing a stream of bytes of a JSON value. Similar to decode/3 but returns when a complete JSON value can be parsed or returns {continue, State} for incomplete data, the State can be fed to the decode_continue/2 function when more data is available.","ref":"json.html#decode_start/3"},{"type":"function","title":"json.encode/1","doc":"Generates JSON corresponding to Term . Supports basic data mapping: | Erlang | JSON | |------------------------|----------| | integer() \\| float() | Number | | true \\| false | Boolean | | null | Null | | binary() | String | | atom() | String | | list() | Array | | #{binary() =&gt; _} | Object | | #{atom() =&gt; _} | Object | | #{integer() =&gt; _} | Object | This is equivalent to encode(Term, fun json:encode_value/2) . Examples 1 &gt; iolist_to_binary ( json : encode ( #{ foo =&gt; &lt;&lt; &quot;bar&quot; &gt;&gt; } ) ) . &lt;&lt; &quot;{\\&quot;foo\\&quot;:\\&quot;bar\\&quot;}&quot; &gt;&gt;","ref":"json.html#encode/1"},{"type":"function","title":"json.encode/2","doc":"Generates JSON corresponding to Term . Can be customised with the Encoder callback. The callback will be recursively called for all the data to be encoded and is expected to return the corresponding encoded JSON as iodata. Various encode_* functions in this module can be used to help in constructing such callbacks. Examples An encoder that uses a heuristic to differentiate object-like lists of key-value pairs from plain lists: 1 &gt; encoder ( [ { _ , _ } | _ ] = Value , Encode ) -&gt; json : encode_key_value_list ( Value , Encode ) ; 2 &gt; encoder ( Other , Encode ) -&gt; json : encode_value ( Other , Encode ) . 3 &gt; custom_encode ( Value ) -&gt; json : encode ( Value , fun ( Value , Encode ) -&gt; encoder ( Value , Encode ) end ) . 4 &gt; iolist_to_binary ( custom_encode ( [ { a , [ ] } , { b , 1 } ] ) ) . &lt;&lt; &quot;{\\&quot;a\\&quot;:[],\\&quot;b\\&quot;:1}&quot; &gt;&gt;","ref":"json.html#encode/2"},{"type":"function","title":"json.encode_atom/2","doc":"Default encoder for atoms used by json:encode/1 . Encodes the atom null as JSON null , atoms true and false as JSON booleans, and everything else as JSON strings calling the Encode callback with the corresponding binary.","ref":"json.html#encode_atom/2"},{"type":"function","title":"json.encode_binary/1","doc":"Default encoder for binaries as JSON strings used by json:encode/1 . Errors - error(unexpected_end) if the binary contains incomplete UTF-8 sequences. - error({invalid_byte, Byte}) if the binary contains invalid UTF-8 sequences.","ref":"json.html#encode_binary/1"},{"type":"function","title":"json.encode_binary_escape_all/1","doc":"Encoder for binaries as JSON strings producing pure-ASCII JSON. For any non-ASCII unicode character, a corresponding \\\\uXXXX sequence is used. Errors - error(unexpected_end) if the binary contains incomplete UTF-8 sequences. - error({invalid_byte, Byte}) if the binary contains invalid UTF-8 sequences.","ref":"json.html#encode_binary_escape_all/1"},{"type":"function","title":"json.encode_float/1","doc":"Default encoder for floats as JSON numbers used by json:encode/1 .","ref":"json.html#encode_float/1"},{"type":"function","title":"json.encode_integer/1","doc":"Default encoder for integers as JSON numbers used by json:encode/1 .","ref":"json.html#encode_integer/1"},{"type":"function","title":"json.encode_key_value_list/2","doc":"Encoder for lists of key-value pairs as JSON objects. Accepts lists with atom, binary, integer, or float keys.","ref":"json.html#encode_key_value_list/2"},{"type":"function","title":"json.encode_key_value_list_checked/2","doc":"Encoder for lists of key-value pairs as JSON objects. Accepts lists with atom, binary, integer, or float keys. Verifies that no duplicate keys will be produced in the resulting JSON object. Errors Raises error({duplicate_key, Key}) if there are duplicates.","ref":"json.html#encode_key_value_list_checked/2"},{"type":"function","title":"json.encode_list/2","doc":"Default encoder for lists as JSON arrays used by json:encode/1 .","ref":"json.html#encode_list/2"},{"type":"function","title":"json.encode_map/2","doc":"Default encoder for maps as JSON objects used by json:encode/1 . Accepts maps with atom, binary, integer, or float keys.","ref":"json.html#encode_map/2"},{"type":"function","title":"json.encode_map_checked/2","doc":"Encoder for maps as JSON objects. Accepts maps with atom, binary, integer, or float keys. Verifies that no duplicate keys will be produced in the resulting JSON object. Errors Raises error({duplicate_key, Key}) if there are duplicates.","ref":"json.html#encode_map_checked/2"},{"type":"function","title":"json.encode_value/2","doc":"Default encoder used by json:encode/1 . Recursively calls Encode on all the values in Value .","ref":"json.html#encode_value/2"},{"type":"type","title":"json.acc/0","doc":null,"ref":"json.html#t:acc/0"},{"type":"type","title":"json.array_finish_fun/0","doc":null,"ref":"json.html#t:array_finish_fun/0"},{"type":"type","title":"json.array_push_fun/0","doc":null,"ref":"json.html#t:array_push_fun/0"},{"type":"type","title":"json.array_start_fun/0","doc":null,"ref":"json.html#t:array_start_fun/0"},{"type":"opaque","title":"json.continuation_state/0","doc":null,"ref":"json.html#t:continuation_state/0"},{"type":"type","title":"json.decode/0","doc":null,"ref":"json.html#t:decode/0"},{"type":"type","title":"json.decode_value/0","doc":null,"ref":"json.html#t:decode_value/0"},{"type":"type","title":"json.decoders/0","doc":null,"ref":"json.html#t:decoders/0"},{"type":"type","title":"json.encode_map/1","doc":null,"ref":"json.html#t:encode_map/1"},{"type":"type","title":"json.encode_value/0","doc":"Simple JSON value encodeable with json:encode/1 .","ref":"json.html#t:encode_value/0"},{"type":"type","title":"json.encoder/0","doc":null,"ref":"json.html#t:encoder/0"},{"type":"type","title":"json.from_binary_fun/0","doc":null,"ref":"json.html#t:from_binary_fun/0"},{"type":"type","title":"json.object_finish_fun/0","doc":null,"ref":"json.html#t:object_finish_fun/0"},{"type":"type","title":"json.object_push_fun/0","doc":null,"ref":"json.html#t:object_push_fun/0"},{"type":"type","title":"json.object_start_fun/0","doc":null,"ref":"json.html#t:object_start_fun/0"},{"type":"type","title":"json.stack/0","doc":null,"ref":"json.html#t:stack/0"},{"type":"extras","title":"Overview","doc":"# json_polyfill\n\nThis lib is just a copy of the `json` module proposed in [EEP 68](https://www.erlang.org/eeps/eep-0068) and [introduced in OTP 27](https://www.erlang.org/news/168#highlights-for-rc2) by [Michał Muskała](https://github.com/michalmuskala).\n\nIts intent is to act as a polyfill for apps that cannot currently be updated to OTP 27 or higher.\n\nThe module and function names are exactly the same. Then, when your app supports OTP >= 27, just remove this lib from the dependencies.","ref":"readme.html"},{"type":"extras","title":"Installation - Overview","doc":"","ref":"readme.html#installation"},{"type":"extras","title":"Erlang - Overview","doc":"```erlang\n% rebar.config\n{deps, [{json_polyfill, \"0.1.2\"}]}.\n```","ref":"readme.html#erlang"},{"type":"extras","title":"Elixir - Overview","doc":"```elixir\n# mix.exs\ndef deps do\n  [{:json_polyfill, \"~> 0.1.2\"}]\nend\n```","ref":"readme.html#elixir"},{"type":"extras","title":"Encode - Overview","doc":"","ref":"readme.html#encode"},{"type":"extras","title":"encode/1 - Overview","doc":"Generates JSON corresponding to `Term`.\n\nSupports basic data mapping:\n\n| **Erlang**             | **JSON** |\n|------------------------|----------|\n| `integer() \\| float()` | Number   |\n| `true \\| false `       | Boolean  |\n| `null`                 | Null     |\n| `binary()`             | String   |\n| `atom()`               | String   |\n| `list()`               | Array    |\n| `#{binary() => _}`     | Object   |\n| `#{atom() => _}`       | Object   |\n| `#{integer() => _}`    | Object   |\n\nThis is equivalent to `encode(Term, fun json:encode_value/2)`.\n\n#### Example\n\n```erlang\n> iolist_to_binary(json:encode(#{foo => <<\"bar\">>})).\n<<\"{\\\"foo\\\":\\\"bar\\\"}\">>\n```","ref":"readme.html#encode-1"},{"type":"extras","title":"encode/2 - Overview","doc":"Generates JSON corresponding to `Term`.\n\nCan be customised with the `Encoder` callback. The callback will be recursively called for all the data to be encoded and is expected to return the corresponding encoded JSON as iodata.\n\nVarious `encode_*` functions in this module can be used to help in constructing such callbacks.\n\n#### Example\n\nAn encoder that uses a heuristic to differentiate object-like lists of key-value pairs from plain lists:\n\n```erlang\n> encoder([{_, _} | _] = Value, Encode) -> json:encode_key_value_list(Value, Encode);\n> encoder(Other, Encode) -> json:encode_value(Other, Encode).\n> custom_encode(Value) -> json:encode(Value, fun(Value, Encode) -> encoder(Value, Encode) end).\n> iolist_to_binary(custom_encode([{a, []}, {b, 1}])).\n<<\"{\\\"a\\\":[],\\\"b\\\":1}\">>\n```","ref":"readme.html#encode-2"},{"type":"extras","title":"Decode - Overview","doc":"","ref":"readme.html#decode"},{"type":"extras","title":"decode/1 - Overview","doc":"Parses a JSON value from `Binary`.\n\nSupports basic data mapping:\n\n| **JSON** | **Erlang**             |\n|----------|------------------------|\n| Number   | `integer() \\| float()` |\n| Boolean  | `true \\| false`        |\n| Null     | `null`                 |\n| String   | `binary()`             |\n| Object   | `#{binary() => _}`     |\n\n#### Errors\n\n* `error(unexpected_end)` if `Binary` contains incomplete JSON value\n* `error({invalid_byte, Byte})` if `Binary` contains unexpected byte or invalid UTF-8 byte\n* `error({invalid_sequence, Bytes})` if `Binary` contains invalid UTF-8 escape\n\n#### Example\n\n```erlang\n> json:decode(<<\"{\\\"foo\\\": 1}\">>).\n#{<<\"foo\">> => 1}\n```","ref":"readme.html#decode-1"},{"type":"extras","title":"decode/3 - Overview","doc":"Parses a JSON value from `Binary`.\n\nSimilar to `decode/1` except the decoding process can be customized with the callbacks specified in `Decoders`. The callbacks will use the `Acc` value as the initial accumulator.\n\nAny leftover, unparsed data in `Binary` will be returned.\n\n#### Default callbacks\n\nAll callbacks are optional. If not provided, they will fall back to implementations used by the `decode/1` function:\n\n* for `array_start`: `fun(_) -> [] end`\n* for `array_push`: `fun(Elem, Acc) -> [Elem | Acc] end`\n* for `array_finish`: `fun(Acc, OldAcc) -> {lists:reverse(Acc), OldAcc} end`\n* for `object_start`: `fun(_) -> [] end`\n* for `object_push`: `fun(Key, Value, Acc) -> [{Key, Value} | Acc] end`\n* for `object_finish`: `fun(Acc, OldAcc) -> {maps:from_list(Acc), OldAcc} end`\n* for `float`: `fun erlang:binary_to_float/1`\n* for `integer`: `fun erlang:binary_to_integer/1`\n* for `string`: `fun (Value) -> Value end`\n* for `null`: the atom `null`\n\n#### Errors\n\n* `error({invalid_byte, Byte})` if `Binary` contains unexpected byte or invalid UTF-8 byte\n* `error({invalid_sequence, Bytes})` if `Binary` contains invalid UTF-8 escape\n* `error(unexpected_end)` if `Binary` contains incomplete JSON value\n\n#### Example\n\nDecoding object keys as atoms:\n\n```erlang\n> Push = fun(Key, Value, Acc) -> [{binary_to_existing_atom(Key), Value} | Acc] end.\n> json:decode(<<\"{\\\"foo\\\": 1}\">>, ok, #{object_push => Push}).\n{#{foo => 1},ok,<<>>}\n```","ref":"readme.html#decode-3"},{"type":"extras","title":"License - Overview","doc":"Erlang/OTP is released under the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\n> %CopyrightBegin%\n>\n> Copyright Ericsson AB 2010-2024. All Rights Reserved.\n>\n> Licensed under the Apache License, Version 2.0 (the \"License\");\n> you may not use this file except in compliance with the License.\n> You may obtain a copy of the License at\n>\n>     http://www.apache.org/licenses/LICENSE-2.0\n>\n> Unless required by applicable law or agreed to in writing, software\n> distributed under the License is distributed on an \"AS IS\" BASIS,\n> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> See the License for the specific language governing permissions and\n> limitations under the License.\n>\n> %CopyrightEnd%","ref":"readme.html#license"},{"type":"extras","title":"License","doc":"# Apache License\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION","ref":"license.html"},{"type":"extras","title":"1. Definitions. - License","doc":"\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.","ref":"license.html#1-definitions"},{"type":"extras","title":"2. Grant of Copyright License. - License","doc":"Subject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.","ref":"license.html#2-grant-of-copyright-license"},{"type":"extras","title":"3. Grant of Patent License. - License","doc":"Subject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.","ref":"license.html#3-grant-of-patent-license"},{"type":"extras","title":"4. Redistribution. - License","doc":"You may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\n1. You must give any other recipients of the Work or Derivative Works a copy of\n   this License; and\n\n2. You must cause any modified files to carry prominent notices stating that\n   You changed the files; and\n\n3. You must retain, in the Source form of any Derivative Works that You\n   distribute, all copyright, patent, trademark, and attribution notices from\n   the Source form of the Work, excluding those notices that do not pertain to\n   any part of the Derivative Works; and\n\n4. If the Work includes a \"NOTICE\" text file as part of its distribution, then\n   any Derivative Works that You distribute must include a readable copy of the\n   attribution notices contained within such NOTICE file, excluding those\n   notices that do not pertain to any part of the Derivative Works, in at least\n   one of the following places: within a NOTICE text file distributed as part\n   of the Derivative Works; within the Source form or documentation, if\n   provided along with the Derivative Works; or, within a display generated by\n   the Derivative Works, if and wherever such third-party notices normally\n   appear. The contents of the NOTICE file are for informational purposes only\n   and do not modify the License. You may add Your own attribution notices\n   within Derivative Works that You distribute, alongside or as an addendum to\n   the NOTICE text from the Work, provided that such additional attribution\n   notices cannot be construed as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.","ref":"license.html#4-redistribution"},{"type":"extras","title":"5. Submission of Contributions. - License","doc":"Unless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.","ref":"license.html#5-submission-of-contributions"},{"type":"extras","title":"6. Trademarks. - License","doc":"This License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.","ref":"license.html#6-trademarks"},{"type":"extras","title":"7. Disclaimer of Warranty. - License","doc":"Unless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE, NON-\nINFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.","ref":"license.html#7-disclaimer-of-warranty"},{"type":"extras","title":"8. Limitation of Liability. - License","doc":"In no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.","ref":"license.html#8-limitation-of-liability"},{"type":"extras","title":"9. Accepting Warranty or Additional Liability. - License","doc":"While redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nCopyright 2024, Ericsson AB 2024-2024.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","ref":"license.html#9-accepting-warranty-or-additional-liability"}],"content_type":"text/plain","producer":{"name":"ex_doc","version":[48,46,51,50,46,50]}}